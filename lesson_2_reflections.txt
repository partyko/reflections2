**** What happens when you initialize a repository? Why do you need to do it?
	An initial git repository -- .git folder, is created when the command "git init" is executed. The presence of the git repository is needed for recording all the commits in the working directory.

**** How is the staging area different from the working directory and the repository? What value do you think it offers?
	The staging area contains the file or (logically-related) files that are ready to be committed (for tracking) to the git repository.  The working directory contains all the files -- those about to be committed and those that are not yet  ready for committing to the repository of the project.

**** How can you use the staging area to make sure you have one commit per logical change?
	Use the staging area for staging files that are inter-related with respect to the single feature that has been added or single bug that has been fixed.

**** What are some situations when branches would be helpful in keeping your history organized? How would branches help?
	Branches based on the master branch (production quality, always works, never breaks) would be helpful when making experimental changes or when exploring solutions without touching any of the content of the actual master branch.

	Branching may be seen as a sort of a path for "context-switching" on the project.

**** How do the diagrams help you visualize the branch structure?
	Graphically representing the branch structure of a repository helps on identifying commits that are reachable and which are unreachable.

	The graphical representation also helps in identifying the relationships of the different branches with respect to the master (or production) branch.

**** What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
	Merging two branches together results in the combining of all the appropriate changes into one single master branch node.  

	The combined branches result in the combining of commit histories of the two branches.  When displayed using "git log", the commit history are displayed in proper time sequence.

	>>>Sample Display<<< 
	towers1209 (master) asteroids $ git log --oneline
	ddeea36 Make the coin solid and yellow.
	f154bc3 Merge 'coins' into 'master'
	37b34e4 Add missing line: this.delayBeforeBullet = 10; on line 424
	3884eab Add color
	3e42136 now using requestAnimationFrame
	4035769 frame interval was set wrong after game was paused
	354dfdd Make ships able to spawn on coins
	0c6daf1 Make it possible to collect coins
	a3c0ae4 Create helper functions
	25ede83 a couple missing ends with the ipad version
	df03538 I can't spell 'screen' apparently :)
	656b02e First pass at adding coins
	b0678b1 Revert controls
	f19cb1b Fix typo in space
	75928a9 Use space for movement and enter for shooting
	:
	:

	To display the commit history showing the proer sequence of commits use "git log --graph --oneline"

	>>>Sample Display<<< 
	towers1209 (master) asteroids $ git log --graph --oneline
	* ddeea36 Make the coin solid and yellow.
	*   f154bc3 Merge 'coins' into 'master'
	|\  
	| * 354dfdd Make ships able to spawn on coins
	| * 0c6daf1 Make it possible to collect coins
	| * a3c0ae4 Create helper functions
	| * 656b02e First pass at adding coins
	* | 37b34e4 Add missing line: this.delayBeforeBullet = 10; on line 424
	* | 3884eab Add color
	* | 3e42136 now using requestAnimationFrame
	* | 4035769 frame interval was set wrong after game was paused
	* | 25ede83 a couple missing ends with the ipad version
	* | df03538 I can't spell 'screen' apparently :)
	|/  
	* b0678b1 Revert controls
	* f19cb1b Fix typo in space
	* 75928a9 Use space for movement and enter for shooting
	:
	:

**** What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
	PROS: The advantage of automatic merging over manual merging:
			It simplifies the process of merging branches. Manual merging can potentially be very tedious.

	CONS: Automatic merging does not work all the time.
		There are situations where the conflicting revisions may be present in at least one file in the branches that are about to be merged. Human intervention -- analyzing which revision takes precedence, or if the revisions in the branches need to be reworked to eliminate the conflict.

**** 
